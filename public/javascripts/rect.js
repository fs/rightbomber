// Generated by CoffeeScript 1.3.3
var Rect;

Rect = (function() {

  function Rect() {}

  Rect.prototype.left = 0;

  Rect.prototype.top = 0;

  Rect.prototype.right = 1;

  Rect.prototype.bottom = 1;

  Rect.prototype.moveBy = function(dx, dy) {
    this.left += dx;
    this.right += dx;
    this.top += dy;
    return this.bottom += dy;
  };

  Rect.prototype.getWidth = function() {
    return this.right - this.left;
  };

  Rect.prototype.getHeight = function() {
    return this.bottom - this.top;
  };

  Rect.prototype.setWidth = function(newWidth) {
    return this.right = this.left + newWidth;
  };

  Rect.prototype.setHeight = function(newHeight) {
    return this.bottom = this.top + newHeight;
  };

  Rect.prototype.setSize = function(newSize) {
    this.setWidth(newSize);
    return this.setHeight(newSize);
  };

  Rect.prototype.intersectsWith = function(rect) {
    var clear;
    clear = (this.left > rect.right) || (this.right < rect.left) || (this.top > rect.bottom) || (this.bottom < rect.top);
    return !clear;
  };

  Rect.prototype.intersectionArea = function(rect) {
    var x1, x2, y1, y2;
    if (!this.intersectsWith(rect)) {
      return 0;
    }
    x1 = this.getInsideCornerX(rect);
    y1 = this.getInsideCornerY(rect);
    x2 = rect.getInsideCornerX(this);
    y2 = rect.getInsideCornerY(this);
    return Math.abs((x1 - x2) * (y1 - y2));
  };

  Rect.prototype.getInsideCornerX = function(rect) {
    var _ref;
    if ((this.left < (_ref = rect.left) && _ref < this.right)) {
      return rect.left;
    } else {
      return rect.right;
    }
  };

  Rect.prototype.getInsideCornerY = function(rect) {
    var _ref;
    if ((this.top < (_ref = rect.top) && _ref < this.bottom)) {
      return rect.top;
    } else {
      return rect.bottom;
    }
  };

  Rect.prototype.contains = function(rect) {
    return this.top <= rect.top && this.left <= rect.left && this.right >= rect.right && this.bottom >= rect.bottom;
  };

  return Rect;

})();
