// Generated by CoffeeScript 1.3.3
var SquaredObject,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SquaredObject = (function(_super) {

  __extends(SquaredObject, _super);

  SquaredObject.prototype.map = null;

  SquaredObject.prototype.size = 1;

  SquaredObject.prototype.moved = false;

  SquaredObject.prototype.velocity = 0;

  SquaredObject.prototype.direction = 0;

  SquaredObject.prototype.epsilon = 0.001;

  function SquaredObject(map) {
    this.map = map;
    this.map.objects.push(this);
    this.setSize(this.size);
  }

  SquaredObject.prototype.setSize = function(newSize) {
    this.size = newSize;
    return SquaredObject.__super__.setSize.call(this, newSize);
  };

  SquaredObject.prototype.olderBy = function(timeDelta) {
    var distance, step;
    this.moved = false;
    distance = this.velocity * timeDelta;
    while (distance > this.size) {
      if (this.move(this.size)) {
        this.moved = true;
        distance -= this.size;
      } else {
        break;
      }
    }
    if (distance > 0) {
      distance = Math.min(this.size, distance);
      step = distance;
      while (Math.min(step, distance) > this.epsilon) {
        if (this.move(step)) {
          this.moved = true;
          distance -= step;
        } else {
          step /= 2;
        }
      }
    }
    return this.moved;
  };

  SquaredObject.prototype.move = function(distance) {
    var dx, dy, movable;
    dx = 0;
    dy = 0;
    if (this.direction === 0) {
      dx = distance;
    }
    if (this.direction === 2) {
      dx = -distance;
    }
    if (this.direction === 1) {
      dy = distance;
    }
    if (this.direction === 3) {
      dy = -distance;
    }
    this.moveBy(dx, dy);
    if (!(movable = this.isMovable())) {
      this.moveBy(-dx, -dy);
    }
    return movable;
  };

  SquaredObject.prototype.isMovable = function() {
    var cell, cells, object, _i, _j, _len, _len1, _ref;
    if (!this.map.contains(this)) {
      return false;
    }
    cells = [this.map.getCell(this.left, this.top), this.map.getCell(this.left, this.bottom), this.map.getCell(this.right, this.top), this.map.getCell(this.right, this.bottom)];
    for (_i = 0, _len = cells.length; _i < _len; _i++) {
      cell = cells[_i];
      if (!cell.passable) {
        return false;
      }
      _ref = cell.objects;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        object = _ref[_j];
        if (this !== object && this.intersectsWith(object)) {
          return false;
        }
      }
    }
    return true;
  };

  return SquaredObject;

})(Rect);
