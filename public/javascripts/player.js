// Generated by CoffeeScript 1.3.3
var Player,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Player = (function(_super) {

  __extends(Player, _super);

  Player.prototype.moving = false;

  Player.prototype.size = 0.5;

  Player.prototype.velocity = 4;

  Player.prototype.direction = 'up';

  Player.prototype.directionMap = {
    right: 0,
    down: 1,
    left: 2,
    up: 3
  };

  function Player(map) {
    this.map = map;
    this.plantBomb = __bind(this.plantBomb, this);

    this.olderBy = __bind(this.olderBy, this);

    Player.__super__.constructor.call(this, this.map);
    this.view = new ObjectView(this);
    this.update();
  }

  Player.prototype.setDirection = function(directionKey) {
    this.directionKey = directionKey;
    return this.direction = this.directionMap[this.directionKey];
  };

  Player.prototype.olderBy = function(timeDelta) {
    if (this.moving && Player.__super__.olderBy.call(this, timeDelta)) {
      return this.update();
    }
  };

  Player.prototype.plantBomb = function() {
    if (!this.lastBomb) {
      return this.lastBomb = new Bomb(this.map, this);
    }
  };

  Player.prototype.getState = function() {
    var state;
    state = ['player'];
    if (this.moving) {
      state.push('moving');
    }
    state.push(this.directionKey);
    return state;
  };

  Player.prototype.update = function() {
    this.view.state = this.getState();
    return this.view.update();
  };

  Player.prototype.intersectsWith = function(object) {
    var intersects;
    intersects = Player.__super__.intersectsWith.call(this, object);
    if (intersects) {
      if (this.lastBomb === object) {
        return false;
      }
    } else {
      if (this.lastBomb === object) {
        this.lastBomb = null;
      }
    }
    return intersects;
  };

  return Player;

})(SquaredObject);
