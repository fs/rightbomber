// Generated by CoffeeScript 1.3.3
var Player,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Player = (function() {

  Player.prototype.velocity = 4;

  Player.prototype.position = {
    x: 0,
    y: 0
  };

  Player.prototype.moving = false;

  Player.prototype.direction = 1;

  Player.prototype.directionMap = {
    0: 'right',
    1: 'up',
    2: 'left',
    3: 'down',
    'right': 0,
    'up': 1,
    'left': 2,
    'down': 3
  };

  function Player() {
    this.toString = __bind(this.toString, this);

    this.move = __bind(this.move, this);

    this.setDirection = __bind(this.setDirection, this);

  }

  Player.prototype.setDirection = function(directionString) {
    return this.direction = this.directionMap[directionString];
  };

  Player.prototype.move = function(timeDelta) {
    var dx, dy, newPosition, velocity;
    if (this.moving) {
      dx = 0;
      dy = 0;
      velocity = this.velocity * timeDelta;
      if (this.direction === 0) {
        dx = velocity;
      }
      if (this.direction === 2) {
        dx = -velocity;
      }
      if (this.direction === 1) {
        dy = -velocity;
      }
      if (this.direction === 3) {
        dy = velocity;
      }
      newPosition = {};
      newPosition.x = this.position.x + dx;
      newPosition.y = this.position.y + dy;
      if (this.isPassable(newPosition)) {
        return this.position = newPosition;
      }
    }
  };

  Player.prototype.toString = function() {
    var state;
    state = ['player'];
    if (this.moving) {
      state.push('moving');
    }
    state.push(this.directionMap[this.direction]);
    return state.join(' ');
  };

  return Player;

})();
