// Generated by CoffeeScript 1.3.3
var BombPiece,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

BombPiece = (function(_super) {

  __extends(BombPiece, _super);

  BombPiece.prototype.velocity = 10;

  BombPiece.prototype.size = 0.3;

  function BombPiece(bomb) {
    this.bomb = bomb;
    this.olderBy = __bind(this.olderBy, this);

    BombPiece.__super__.constructor.call(this, this.bomb.map);
    this.moveBy(this.bomb.left, this.bomb.top);
    this.velocity = Math.random() * 20;
    this.direction = 4 * Math.random();
    if (this.direction === 4) {
      this.direction = 0;
    }
    this.representation = new ObjectView(this);
    this.update();
  }

  BombPiece.prototype.olderBy = function(timeDelta) {
    if (BombPiece.__super__.olderBy.call(this, timeDelta)) {
      return this.update();
    }
  };

  BombPiece.prototype.update = function() {
    this.representation.state = ['bomb-piece'];
    return this.representation.update();
  };

  BombPiece.prototype.cutCorners = function(distance) {
    return distance;
  };

  BombPiece.prototype.intersectsWith = function(object) {
    if (object instanceof BombPiece) {
      return false;
    } else {
      return this.bomb !== object && BombPiece.__super__.intersectsWith.call(this, object);
    }
  };

  return BombPiece;

})(SquaredObject);
