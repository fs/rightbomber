// Generated by CoffeeScript 1.3.3
var Square,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Square = (function() {

  Square.prototype.map = null;

  Square.prototype.direction = 0;

  Square.prototype.velocity = 0;

  Square.prototype.size = 1;

  Square.prototype.epsilon = 0.05;

  function Square(map) {
    this.map = map;
    this.move = __bind(this.move, this);

    this.position = {
      x: 0,
      y: 0
    };
  }

  Square.prototype.move = function(timeDelta) {
    var dx, dy, moved, newPosition, velocity;
    dx = 0;
    dy = 0;
    velocity = this.velocity * timeDelta;
    if (this.direction === 0) {
      dx = velocity;
    }
    if (this.direction === 2) {
      dx = -velocity;
    }
    if (this.direction === 1) {
      dy = velocity;
    }
    if (this.direction === 3) {
      dy = -velocity;
    }
    newPosition = {
      x: this.position.x + dx,
      y: this.position.y + dy
    };
    moved = this.isPassable(newPosition);
    if (moved) {
      this.position = newPosition;
    }
    return moved;
  };

  Square.prototype.isPassable = function(position) {
    var x1, x2, y1, y2;
    x1 = Math.floor(position.x + this.epsilon);
    y1 = Math.floor(position.y + this.epsilon);
    x2 = Math.floor(position.x + this.size - this.epsilon);
    y2 = Math.floor(position.y + this.size - this.epsilon);
    return (x1 >= 0) && (y1 >= 0) && (x2 < this.map.cols) && (y2 < this.map.rows) && this.map.getCell(x1, y1).passable && this.map.getCell(x1, y2).passable && this.map.getCell(x2, y1).passable && this.map.getCell(x2, y2).passable;
  };

  return Square;

})();
