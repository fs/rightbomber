// Generated by CoffeeScript 1.3.3
var MapCell, MapModel, MapView,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

window.map_debug = function(message) {
  return console.log("map: " + message);
};

$(function() {
  var grid, map, map_view;
  map = new MapModel();
  map.generate({});
  map_view = new MapView();
  grid = map_view.render(map, {});
  return $("body").append(grid);
});

MapModel = (function() {

  function MapModel() {
    this.generateTerrain = __bind(this.generateTerrain, this);

    this.initCells = __bind(this.initCells, this);

    this.generate = __bind(this.generate, this);
    map_debug("init");
  }

  MapModel.prototype.generate = function(options) {
    var cols, rows;
    map_debug("generate");
    this.cells = [];
    options || (options = {});
    rows = options.rows || 40;
    cols = options.cols || 100;
    this.cells = this.initCells(rows, cols);
    return this.generateTerrain();
  };

  MapModel.prototype.getCell = function(x, y) {
    return this.cells[x][y];
  };

  MapModel.prototype.initCells = function(rows, cols) {
    var cells, colnum, rownum;
    map_debug("init cells");
    this.rows = rows;
    this.cols = cols;
    cells = [];
    rownum = 0;
    while (rownum < rows) {
      colnum = 0;
      cells[rownum] = new Array(cols);
      while (colnum < cols) {
        cells[rownum][colnum] = new MapCell();
        colnum++;
      }
      rownum++;
    }
    return cells;
  };

  MapModel.prototype.generateTerrain = function() {
    var colnum, rownum;
    map_debug("generateTerrain");
    rownum = 0;
    while (rownum < this.rows) {
      colnum = 0;
      while (colnum < this.cols) {
        if ((rownum + colnum) % 8 === 0) {
          this.cells[rownum][colnum].setPassable(false);
        }
        colnum++;
      }
      rownum++;
    }
    return this.cells;
  };

  return MapModel;

})();

MapView = (function() {

  function MapView() {
    map_debug("view init");
  }

  MapView.prototype.render = function(map) {
    var $cell, $result, $row, cell, colnum, rownum;
    $result = $("<table/>", {
      id: "map-grid",
      style: "display: block;"
    });
    rownum = 0;
    while (rownum < map.rows) {
      colnum = 0;
      $row = $("<tr />", {
        "data-row": rownum
      });
      while (colnum < map.cols) {
        cell = map.getCell(rownum, colnum);
        $cell = $("<td />", {
          "data-row": rownum,
          "data-col": colnum,
          "class": cell.getType()
        });
        $row.append($cell);
        colnum++;
      }
      rownum++;
      $result.append($row);
    }
    return $result;
  };

  return MapView;

})();

MapCell = (function() {

  function MapCell(rownum, colnum) {
    this.setPassable = __bind(this.setPassable, this);

    this.isPassable = __bind(this.isPassable, this);

    this.getType = __bind(this.getType, this);
    this.rownum = rownum;
    this.colnum = colnum;
    this.passable = true;
  }

  MapCell.prototype.getType = function() {
    if (this.passable) {
      return 'grass';
    } else {
      return 'stone';
    }
  };

  MapCell.prototype.isPassable = function() {
    return this.passable;
  };

  MapCell.prototype.setPassable = function(value) {
    return this.passable = value;
  };

  return MapCell;

})();
