// Generated by CoffeeScript 1.3.3
(function() {
  var MapCell, MapModel, MapView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  MapModel = (function() {

    function MapModel(options) {
      this.generateTerrain = __bind(this.generateTerrain, this);

      this.initCells = __bind(this.initCells, this);

      var cols, rows;
      rows = options.rows || 20;
      cols = options.cols || 20;
      this.initCells(rows, cols);
      this.generateTerrain();
    }

    MapModel.prototype.getCell = function(x, y) {
      try {
        return this.cells[x][y];
      } catch (e) {
        return new MapCell();
      }
    };

    MapModel.prototype.initCells = function(rows, cols) {
      var colnum, rownum;
      this.rows = rows;
      this.cols = cols;
      this.cells = [];
      rownum = 0;
      while (rownum < rows) {
        colnum = 0;
        while (colnum < cols) {
          this.cells[rownum][colnum] = new MapCell();
        }
      }
      return this.cells;
    };

    MapModel.prototype.generateTerrain = function() {
      var colnum, rownum;
      this.cells = [];
      rownum = 0;
      while (rownum < this.rows) {
        colnum = 0;
        while (colnum < this.cols) {
          if (rownum + colnum % 10 === 0) {
            this.cells[rownum][colnum].setPassable(false);
          }
        }
      }
      return this.cells;
    };

    return MapModel;

  })();

  MapView = (function() {

    function MapView(map) {
      this.map = map;
    }

    return MapView;

  })();

  MapCell = (function() {

    function MapCell(rownum, colnum) {
      this.setPassable = __bind(this.setPassable, this);

      this.isPassable = __bind(this.isPassable, this);
      this.rownum = rownum;
      this.colnum = colnum;
      this.passable = true;
    }

    MapCell.prototype.isPassable = function() {
      return this.passable;
    };

    MapCell.prototype.setPassable = function(value) {
      return this.passable = value;
    };

    return MapCell;

  })();

}).call(this);
