// Generated by CoffeeScript 1.3.3
var Representation,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Representation = (function() {

  function Representation(world, object) {
    this.world = world;
    this.object = object;
    this.update = __bind(this.update, this);

    this.getElement = __bind(this.getElement, this);

  }

  Representation.prototype.getElement = function() {
    if (!this.element) {
      this.element = $("<div>");
      $(this.world).append(this.element);
    }
    return this.element;
  };

  Representation.prototype.update = function() {
    var element, newClass, newX, newY, _ref;
    element = this.getElement();
    newX = parseInt(this.object.position.x * 16);
    newY = parseInt(this.object.position.y * 16);
    newClass = this.object.toString();
    if ((newX !== this.oldX) || (newY !== this.oldY) || (newClass !== this.oldClass)) {
      element.attr({
        "class": newClass
      });
      element.css({
        left: newX + 'px',
        top: newY + 'px'
      });
      return _ref = [newX, newY, newClass], this.oldX = _ref[0], this.oldY = _ref[1], this.oldClass = _ref[2], _ref;
    }
  };

  return Representation;

})();
